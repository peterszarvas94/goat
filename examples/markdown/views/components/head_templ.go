// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/peterszarvas94/goat/pkg/importmap"
	"strings"
)

type HeadProps struct {
	Title       string
	Description string
	Author      string
	Keywords    []string
	Scripts     []string // e.g. index.js -> /js/src/index.js
	Styles      []string // e.g. index.css -> /css/src/index.css
}

func Head(props HeadProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><head><!--meta--><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"description\" content=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(props.Description)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `examples/markdown/views/components/head.templ`, Line: 23, Col: 54}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><meta name=\"keywords\" content=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(strings.Join(props.Keywords, ","))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `examples/markdown/views/components/head.templ`, Line: 24, Col: 67}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"><meta name=\"author\" content=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(props.Author)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `examples/markdown/views/components/head.templ`, Line: 25, Col: 44}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(props.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `examples/markdown/views/components/head.templ`, Line: 26, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</title><!--js--><!-- definition in the importmap.json -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = importmap.ScriptTag().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, script := range props.Scripts {
			templ_7745c5c3_Err = UserScript(script).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<link href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css\" rel=\"stylesheet\"><script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script><script>hljs.highlightAll();</script><style>\n        /* DaisyUI Highlight.js Theme - Uses correct semantic color names */\n\t\t.prose {\n\t\t\tpre{\n\t\t\t\tcolor: unset;\n\t\t\t\tbackground: unset;\n\t\t\t}\n\n\t\t\tcode {\n\t\t\t\tborder: unset;\n\t\t\t\tborder-radius: var(--radius-box);\n\t\t\t}\n\t\t}\n\n        .hljs {\n            background: var(--color-base-200);\n            color: var(--color-base-content);\n            border-radius: var(--rounded-box);\n            padding: 1rem;\n            overflow-x: auto;\n            border: 1px solid var(--color-base-300);\n        }\n\n        /* Comments */\n        .hljs-comment,\n        .hljs-quote {\n            color: var(--color-base-content);\n            font-style: italic;\n            opacity: 0.7;\n        }\n\n        /* Keywords */\n        .hljs-keyword,\n        .hljs-selector-tag,\n        .hljs-subst {\n            color: var(--color-accent);\n            font-weight: 600;\n        }\n\n        /* Numbers and literals */\n        .hljs-number,\n        .hljs-literal,\n        .hljs-variable,\n        .hljs-template-variable,\n        .hljs-tag .hljs-attr {\n            color: var(--color-accent);\n        }\n\n        /* Strings */\n        .hljs-string,\n        .hljs-doctag {\n            color: var(--color-info);\n        }\n\n        /* Function names and titles */\n        .hljs-title,\n        .hljs-title.class_,\n        .hljs-title.class_.inherited__,\n        .hljs-title.function_,\n        .hljs-function .hljs-title {\n            color: var(--color-error);\n            font-weight: 600;\n        }\n\n        /* Built-ins and types */\n        .hljs-built_in,\n        .hljs-type,\n        .hljs-class .hljs-title {\n            color: var(--color-info);\n            font-weight: 500;\n        }\n\n        /* Attributes */\n        .hljs-attribute,\n        .hljs-attr {\n            color: var(--color-warning);\n        }\n\n        /* Symbols and operators */\n        .hljs-symbol,\n        .hljs-bullet,\n        .hljs-link {\n            color: var(--color-accent);\n        }\n\n        /* Meta and preprocessor */\n        .hljs-meta,\n        .hljs-meta .hljs-keyword {\n            color: var(--color-warning);\n        }\n\n        /* Sections and names */\n        .hljs-section,\n        .hljs-name {\n            color: var(--color-primary);\n            font-weight: 600;\n        }\n\n        /* Additions and deletions */\n        .hljs-addition {\n            color: var(--color-secondary);\n            /* background-color: var(--color-success) / 0.1; */\n        }\n\n        .hljs-deletion {\n            color: var(--color-error);\n            /* background-color: var(--color-error) / 0.1; */\n        }\n\n        /* Tags and selectors */\n        .hljs-tag,\n        .hljs-selector-id,\n        .hljs-selector-class,\n        .hljs-selector-attr,\n        .hljs-selector-pseudo {\n            color: var(--color-secondary);\n        }\n\n        /* Emphasis */\n        .hljs-emphasis {\n            font-style: italic;\n        }\n\n        .hljs-strong {\n            font-weight: bold;\n        }\n    </style><!--css-->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, style := range props.Styles {
			templ_7745c5c3_Err = UserStyle(style).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
